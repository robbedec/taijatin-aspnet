// <auto-generated />
using System;
using G10_ProjectDotNet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace G10_ProjectDotNet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190520122156_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("G10_ProjectDotNet.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<bool>("AgreeWithBylaws");

                    b.Property<bool>("AgreeWithPicturesAndAudio");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("BornIn");

                    b.Property<string>("Email");

                    b.Property<string>("EmailParent");

                    b.Property<string>("Firstname");

                    b.Property<int>("Gender");

                    b.Property<string>("Lastname");

                    b.Property<string>("MobilePhoneNumber");

                    b.Property<string>("NationalInsuranceNumber");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("ReceiveClubinfo");

                    b.Property<bool>("ReceiveInfoAboutPromotionsAndFederalMatters");

                    b.Property<DateTime>("Registrationdate");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Type").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int>("Number");

                    b.Property<string>("Street");

                    b.Property<int>("ZipCode");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Attendance", b =>
                {
                    b.Property<int>("SessionId");

                    b.Property<int>("MemberId");

                    b.HasKey("SessionId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText");

                    b.Property<int>("CourseModuleId");

                    b.Property<int>("MemberId");

                    b.HasKey("CommentId");

                    b.HasIndex("CourseModuleId");

                    b.HasIndex("MemberId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.CommentReply", b =>
                {
                    b.Property<int>("CommentReplyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<int?>("MemberId");

                    b.Property<string>("ReplyText");

                    b.HasKey("CommentReplyId");

                    b.HasIndex("CommentId");

                    b.HasIndex("MemberId");

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MinGrade");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.CourseModule", b =>
                {
                    b.Property<int?>("CourseModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<string>("ImageAlt");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.Property<string>("Url");

                    b.HasKey("CourseModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.CourseModuleViewer", b =>
                {
                    b.Property<int>("CourseModuleViewerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseModuleId");

                    b.Property<int>("MemberId");

                    b.HasKey("CourseModuleViewerId");

                    b.HasIndex("CourseModuleId");

                    b.HasIndex("MemberId");

                    b.ToTable("CourseModuleViewers");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Formula", b =>
                {
                    b.Property<int>("FormulaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormulaName");

                    b.Property<int?>("TeacherId");

                    b.HasKey("FormulaId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.FormulaDay", b =>
                {
                    b.Property<int>("FormulaDayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("FormulaDayId");

                    b.ToTable("FormulaDay");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.FormulaFormulaDay", b =>
                {
                    b.Property<int>("FormulaId");

                    b.Property<int>("FormulaDayId");

                    b.HasKey("FormulaId", "FormulaDayId");

                    b.HasIndex("FormulaDayId");

                    b.ToTable("Formula_FormulaDays");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("Day");

                    b.Property<string>("StateSerialized");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Admin", b =>
                {
                    b.HasBaseType("G10_ProjectDotNet.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Beheerder");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Member", b =>
                {
                    b.HasBaseType("G10_ProjectDotNet.Models.ApplicationUser");

                    b.Property<int>("FormulaId");

                    b.Property<int>("Grade");

                    b.Property<int>("Score");

                    b.HasIndex("FormulaId");

                    b.HasDiscriminator().HasValue("Lid");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Teacher", b =>
                {
                    b.HasBaseType("G10_ProjectDotNet.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Lesgever");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.ApplicationUser", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Attendance", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.Member", "Member")
                        .WithMany("Attendances")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("G10_ProjectDotNet.Models.Domain.Session", "Session")
                        .WithMany("Attendances")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Comment", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.CourseModule", "CourseModule")
                        .WithMany("Comments")
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("G10_ProjectDotNet.Models.Domain.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.CommentReply", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId");

                    b.HasOne("G10_ProjectDotNet.Models.Domain.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.CourseModule", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.CourseModuleViewer", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.CourseModule", "CourseModule")
                        .WithMany()
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("G10_ProjectDotNet.Models.Domain.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Formula", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.Teacher", "Teacher")
                        .WithMany("Formulas")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.FormulaFormulaDay", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.FormulaDay", "FormulaDay")
                        .WithMany("Join")
                        .HasForeignKey("FormulaDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("G10_ProjectDotNet.Models.Domain.Formula", "Formula")
                        .WithMany("Days")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("G10_ProjectDotNet.Models.Domain.Member", b =>
                {
                    b.HasOne("G10_ProjectDotNet.Models.Domain.Formula", "Formula")
                        .WithMany("Members")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
